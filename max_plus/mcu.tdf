SUBDESIGN mcu
(
	cop[3..0],
	clk,
	boolean : INPUT;
	bus_controller_in[1..0],
	acc_controller_in[1..0],
	memory_write,
	ip_enabled, ip_overwrite,
	operator_code[1..0],
	accumulator_enabled,
	ir_enabled, print_acc : OUTPUT;
)

VARIABLE
	sm : MACHINE WITH STATES (
		read, start,
		math0, math1,
		logic0, logic1,
		mod0, mod1,
		load0, load1,
		save0,
		gotoPass, gotoMove,
		finish,
		print
		);

BEGIN

sm.clk = clk;

CASE sm IS
	WHEN start =>
		CASE cop[] IS
			WHEN b"00XX" =>
				% It's math operation (add/sub/mul/div) %
				sm = math0;
			WHEN b"01XX" =>
				% It's logic operation (and/or/xor/not) %
				sm = logic0;
			WHEN b"1011" =>
				% MOD %
				sm = mod0;
			WHEN b"1100" =>
				sm = load0;
			WHEN b"1101" =>
				sm = save0;
			WHEN b"1110" =>
				IF boolean THEN
					sm = gotoMove;
				ELSE
					sm = gotoPass;
				END IF;
			WHEN b"1111" =>
				sm = print;
		END CASE;

	WHEN read => sm = start;
	
	WHEN math0  => sm = math1;
	WHEN math1  => sm = finish;	

	WHEN logic0 => sm = logic1;
	WHEN logic1 => sm = finish;

	WHEN load0 => sm = load1;
	WHEN load1 => sm = finish;

	WHEN mod0 => sm = mod1;
	WHEN mod1 => sm = finish;

	WHEN save0 => sm = finish;

	WHEN gotoPass => sm = finish;
	WHEN gotoMove => sm = finish;

	WHEN print => sm = print;

	WHEN finish => sm = read;
END CASE;

operator_code[] = cop[1..0]; % Last two bits of COP passed to operational/logical block to set the operator code %

TABLE
	sm     => bus_controller_in[], acc_controller_in[], memory_write, ip_enabled, ip_overwrite, accumulator_enabled, ir_enabled;

	read   => b"01"              , b"01"              , GND         , GND       , GND         , GND                , VCC       ; % Read from mem to ir %
	start  => b"01"              , b"01"              , GND         , GND       , GND         , GND                , VCC       ; % Read from mem to ir %

	math0  => b"01"              , b"01"              , GND         , GND       , GND         , GND                , GND       ; % Read from mem to bus %
	math1  => b"01"              , b"01"              , GND         , VCC       , GND         , VCC                , GND       ; % Read from ob.q to acc %

	logic0 => b"01"              , b"10"              , GND         , GND       , GND         , GND                , GND       ; % Read from mem to bus %
	logic1 => b"01"              , b"10"              , GND         , VCC       , GND         , VCC                , GND       ; % Read from lb.q to acc %

	mod0   => b"01"              , b"11"              , GND         , GND       , GND         , GND                , GND       ; % Read from mem to bus %
	mod1   => b"01"              , b"11"              , GND         , VCC       , GND         , VCC                , GND       ; % Read from ob.reminder to acc %

	load0  => b"01"              , b"00"              , GND         , GND       , GND         , GND                , GND       ; % Read from mem to bus %
	load1  => b"01"              , b"00"              , GND         , VCC       , GND         , VCC                , GND       ; % Read from bus to acc %

	save0  => b"10"              , b"01"              , VCC         , VCC       , GND         , GND                , GND       ; % Read from acc to mem %

	gotoPass => b"01"            , b"01"              , GND         , VCC       , GND         , GND                , GND       ; % Enable ip and finish %

	gotoMove => b"10"            , b"01"              , GND         , VCC       , VCC         , GND                , GND       ; % Enable ip and overwrite it with bus data, which comes from ir %

	print  => b"10"              , b"01"              , GND         , GND       , GND         , GND                , GND       ; % Do nothing, basically %

	finish => b"00"              , b"01"              , GND         , GND       , GND         , GND                , GND       ;
END TABLE;

print_acc = sm == print;

END;
