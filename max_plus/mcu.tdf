SUBDESIGN mcu
(
	cop[3..0],
	clk,
	boolean : INPUT;
	bus_controller_in[1..0],
	acc_controller_in[1..0],
	memory_write,
	ip_enabled, ip_overwrite,
	operator_code[1..0],
	accumulator_enabled,
	ir_enabled, print_acc : OUTPUT;
)

VARIABLE
	sm : MACHINE WITH STATES (
		read, start,
		math0, math1,
		logic0, logic1,
		load0, load1,
		save0,
		gotoPass, gotoMove,
		finish,
		print
		);

BEGIN

sm.clk = clk;

IF sm == start THEN
	CASE cop[] IS
		WHEN b"00XX" =>
			% It's math operation (add/sub/mul/div) %
			sm = math0;
		WHEN b"01XX" =>
			% It's logic operation (and/or/xor/not) %
			sm = logic0;
		WHEN b"1100" =>
			sm = load0;
		WHEN b"1101" =>
			sm = save0;
		WHEN b"1110" =>
			IF boolean THEN
				sm = gotoMove;
			ELSE
				sm = gotoPass;
			END IF;
		WHEN b"1111" =>
			sm = print;
	END CASE;
END IF;

TABLE
	sm     => sm;

	read   => start;
	
	math0  => math1;
	math1  => finish;	

	logic0  => logic1;
	logic1  => finish;

	load0  => load1;
	load1  => finish;

	save0  => finish;

	gotoPass => finish;
	gotoMove => finish;

	print => print;

	finish => read;
END TABLE;

operator_code[] = cop[1..0]; % Last two bits of COP passed to operational/logical block to set the operator code %

TABLE
	sm     => bus_controller_in[], acc_controller_in[], memory_write, ip_enabled, ip_overwrite, accumulator_enabled, ir_enabled;

	read   => b"01"              , b"01"              , GND         , GND       , GND         , GND                , VCC       ; % Read from mem to ir %
	start  => b"01"              , b"01"              , GND         , GND       , GND         , GND                , VCC       ; % Read from mem to ir %

	math0  => b"01"              , b"01"              , GND         , GND       , GND         , GND                , GND       ; % Read from mem to bus %
	math1  => b"01"              , b"01"              , GND         , VCC       , GND         , VCC                , GND       ; % Read from ob to acc %

	logic0 => b"01"              , b"10"              , GND         , GND       , GND         , GND                , GND       ; % Read from mem to bus %
	logic1 => b"01"              , b"10"              , GND         , VCC       , GND         , VCC                , GND       ; % Read from lb to acc %

	load0  => b"01"              , b"00"              , GND         , GND       , GND         , GND                , GND       ; % Read from mem to bus %
	load1  => b"01"              , b"00"              , GND         , VCC       , GND         , VCC                , GND       ; % Read from bus to acc %

	save0  => b"10"              , b"01"              , VCC         , VCC       , GND         , GND                , GND       ; % Read from acc to mem %

	gotoPass => b"01"            , b"01"              , GND         , VCC       , GND         , GND                , GND       ; % Enable ip and finish %

	gotoMove => b"10"            , b"01"              , GND         , VCC       , VCC         , GND                , GND       ; % Enable ip and overwrite it with bus data, which comes from ir %

	print  => b"10"              , b"01"              , GND         , GND       , GND         , GND                , GND       ; % Do nothing, basically %

	finish => b"00"              , b"01"              , GND         , GND       , GND         , GND                , GND       ;
END TABLE;

print_acc = sm == print;

END;
